# Copyright 2014 Clayton Smith
#
# This file is part of qam-tx
#
# qam-tx is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# qam-tx is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with qam-tx; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

qam-tx
======

Author: Clayton Smith
Email: <argilo@gmail.com>

The goal of thhis project is to build a software-defined 64-QAM and
256-QAM transmitter, based on the ANSI/SCTE 07 2013 Digital
Transmission Standard for Cable Television:

    http://www.scte.org/FileDownload.aspx?A=3445

At present, a complete 64-QAM transmitter is implemented, but it does
not yet run fast enough for real-time transmission.  It consists of two
parts: a Python script (qam-steps.py) that takes an MPEG transport
stream as input and produces a file containing 64-QAM symbols.  This is
the part that runs well slower than real-time.  The second piece is a
GNU Radio flow graph (qam64.grc) that reads in the 64-QAM symbols
produced by qam-steps.py and transmits them through a BladeRF.  By
default, it does so on 438-444 MHz, which corresponds with cable
channel 60 and happens to be in the 70cm amateur band.  To adjust the
transmit frequency, change the center_freq variable.

The qam-constellation.py script is not needed for transmitting; it was
used to convert the QAM constellation table from ANSI/SCTE 70 2013 into
I/Q values for the "Chunks to Symbols" block in the flow graph.

The next step for the project is to replace qam-steps.py with optimized
GNU Radio blocks so that the transmitter can run in real time.

Build instructions:

    mkdir build
    cd build
    cmake ../
    make
    sudo make install
    sudo ldconfig

Contributions are welcome!
